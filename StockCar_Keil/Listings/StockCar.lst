C51 COMPILER V9.60.7.0   STOCKCAR                                                          07/22/2025 22:41:04 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE STOCKCAR
OBJECT MODULE PLACED IN .\Objects\StockCar.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE StockCar.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -StockCar.lst) TABS(2) OBJECT(.\Objects\StockCar.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #include <stdlib.h>
   4          #include <Font_Header.h>
   5          
   6          
   7          #define Data_Port P1
   8          sbit RS = P2^0;
   9          sbit RW = P2^1;
  10          sbit E = P2^2;
  11          sbit CS1 = P2^3;
  12          sbit CS2 = P2^4;
  13          sbit RST = P2^5;
  14          sbit LINHA1 = P0^3;
  15          sbit LINHA2 = P0^2;
  16          sbit LINHA3 = P0^1;
  17          sbit LINHA4 = P0^0;
  18          sbit COL1 = P0^6;
  19          sbit COL2 = P0^5;
  20          sbit COL3 = P0^4;
  21          
  22          // Configurações de elementos
  23          #define LEFT_TRACK_BASE 34 // Lado esquerdo da pista inicial
  24          #define RIGHT_TRACK_BASE 94 // Lado direito da pista inicial
  25          #define TRACK_WIDTH 60 // Largura da pista
  26          #define CAR_HEIGHT 1 //Altura do carro em páginas
  27          #define CAR_WIDTH 6  // Largura do carro em pixels
  28          #define MAX_OBSTACLES 3 // Número máximo de obstáculos simultâneos na pista
  29          #define OBSTACLE_HEIGHT 1 //Altura dos obstáculos em páginas
  30          #define OBSTACLE_WIDTH 6  //Largura dos obstáculos em pixels
  31          #define SPACING 10 // Espaçamento entre obstáculos em pixels
  32          
  33          // Variáveis globais 
  34          bit em_curva=0, colisao=0;
  35          int score = 0;
  36          int size_curva, offset = 0, seta = 0;
  37          char center_car = LEFT_TRACK_BASE + TRACK_WIDTH / 2;
  38          signed char track_offsets[8];
  39          int seta;
  40          
  41          
  42          // Bitmaps de carro e obstáculos
  43          const unsigned char car[6] = {0x7E, 0x7E, 0xFF, 0xFF, 0x7E, 0x7E};
  44          const unsigned char enemy_car[6] = {0x7E, 0x7E, 0x81, 0x81, 0x7E, 0x7E};
  45          
  46          // Função para comandos e dados
  47          void GLCD_Write(char info, bit tipo) {
  48   1          Data_Port = info;
  49   1          RS = !tipo; 
  50   1          RW = 0; 
  51   1          E = 1; 
  52   1          _nop_();
  53   1          E = 0;
  54   1      }
C51 COMPILER V9.60.7.0   STOCKCAR                                                          07/22/2025 22:41:04 PAGE 2   

  55          
  56          //Função de delay
  57          void delay(unsigned int k) {
  58   1          while(k--) {
  59   2              unsigned char j = 112;
  60   2              while(j--);
  61   2          }
  62   1      }
  63          
  64          //Inicializaçao do display
  65          void GLCD_Init() {
  66   1          CS1 = CS2 = RST = 1;
  67   1          delay(20);
  68   1          GLCD_Write(0x3E, 1); // Display OFF
  69   1          GLCD_Write(0xC0, 1); // Start line
  70   1          GLCD_Write(0x3F, 1); // Display ON
  71   1      }
  72          
  73          //Limpeza do display
  74          void GLCD_ClearAll() {
  75   1          unsigned char page, col;
  76   1          for (page = 0; page < 8; page++) {
  77   2              CS1 = 0; CS2 = 1;
  78   2              GLCD_Write(0xB8 | page, 1);
  79   2              GLCD_Write(0x40, 1);
  80   2              for(col = 0; col < 64; col++) GLCD_Write(0, 0);
  81   2              
  82   2              CS1 = 1; CS2 = 0;
  83   2              GLCD_Write(0xB8 | page, 1);
  84   2              GLCD_Write(0x40, 1);
  85   2              for(col = 0; col < 64; col++) GLCD_Write(0, 0);
  86   2          }
  87   1          CS1 = CS2 = 1;
  88   1      }
  89          
  90          // Geração de curvas de forma aleatória
  91          void Gerar_Curva() {
  92   1          int page;
  93   1          static unsigned char size_curva;
  94   1          
  95   1          // Lógica da curva
  96   1          if (!em_curva) {
  97   2              if (abs(offset) <= 1) {
  98   3                  size_curva = (rand() %21) ;
  99   3                  offset = (rand() & 1) ? 1 : -1;
 100   3                  em_curva = 1;
 101   3              } else {
 102   3                  offset += (offset > 0) ? -1 : 1;
 103   3              }
 104   2          } 
 105   1          else {
 106   2            if (--size_curva <= 0)
 107   2              em_curva = 0;
 108   2            offset += (offset > 0) ? 1 : -1;
 109   2          }
 110   1          
 111   1          // Desenho da pista
 112   1          for (page = 0; page < 8; page++) {
 113   2            int left_pos, right_pos;
 114   2              signed char po = (offset * (8 - page)) / 8;
 115   2              track_offsets[page] = po;
 116   2              
C51 COMPILER V9.60.7.0   STOCKCAR                                                          07/22/2025 22:41:04 PAGE 3   

 117   2              left_pos = LEFT_TRACK_BASE + po;
 118   2              if (left_pos < 64) {
 119   3                  CS1 = 0; CS2 = 1;
 120   3                  GLCD_Write(0xB8 | page, 1);
 121   3                  GLCD_Write(0x40 | left_pos, 1);
 122   3                  GLCD_Write(0xFF, 0);
 123   3              }
 124   2              
 125   2              right_pos = RIGHT_TRACK_BASE + po;
 126   2              if (right_pos < 128) {
 127   3                  CS1 = 1; CS2 = 0;
 128   3                  GLCD_Write(0xB8 | page, 1);
 129   3                  GLCD_Write(0x40 | (right_pos - 64), 1);
 130   3                  GLCD_Write(0xFF, 0);
 131   3              }
 132   2          }
 133   1      }
 134          
 135          // Geração de obstáculos
 136          typedef struct {
 137              unsigned char x, active, page;
 138          } Obstacle;
 139          Obstacle obstacles[MAX_OBSTACLES];
 140          unsigned char obstacle_timer = 10;
 141          
 142          void Generate_Obstacles() {
 143   1        //Obstáculos gerados com base no offset da curva
 144   1          static unsigned char timer = 10;
 145   1        unsigned char j;
 146   1        unsigned char i, col;
 147   1          if (--timer == 0) {
 148   2              timer = (rand() % 20);
 149   2              for (j = 0; j< MAX_OBSTACLES; j++) {
 150   3                  if (!obstacles[j].active) {
 151   4                      obstacles[j].x = LEFT_TRACK_BASE+ offset + 4 + (rand() % (TRACK_WIDTH - 8));
 152   4                      obstacles[j].page = 0;
 153   4                      obstacles[j].active = 1;
 154   4                      break;
 155   4                  }
 156   3              }
 157   2          }
 158   1          //Impressão dos obstáculos na pista
 159   1          for (i = 0; i < MAX_OBSTACLES; i++) {
 160   2              if (obstacles[i].active) {
 161   3                  for (col = 0; col < OBSTACLE_WIDTH; col++) {
 162   4                      int x = obstacles[i].x + col;
 163   4                      if (x < 64) { CS1 = 0; CS2 = 1; }
 164   4                      else { x -= 64; CS1 = 1; CS2 = 0; }
 165   4                      
 166   4                      GLCD_Write(0xB8 | obstacles[i].page, 1);
 167   4                      GLCD_Write(0x40 | x, 1);
 168   4                      GLCD_Write(enemy_car[col], 0);
 169   4                  }
 170   3                  if (++obstacles[i].page > 7) {
 171   4                      obstacles[i].active = 0;
 172   4                  }
 173   3              }
 174   2          }
 175   1      }
 176          
 177          int scanKey() {
 178   1          //Botões para movimentos laterais 
C51 COMPILER V9.60.7.0   STOCKCAR                                                          07/22/2025 22:41:04 PAGE 4   

 179   1          LINHA1 = 0;
 180   1          if (!COL1) return -4; //Linha 1, Coluna 1
 181   1          if (!COL2) return 4; //Linha 1, Coluna 2
 182   1          LINHA1 = 1;
 183   1          return 0;
 184   1      }
 185          
 186          bit check_collision(int car_left) {
 187   1          unsigned char i;
 188   1          // Verifica colisão com obstáculos
 189   1          for (i = 0; i < MAX_OBSTACLES; i++) {
 190   2              if (obstacles[i].active && obstacles[i].page >= 7) {
 191   3                  if (!(obstacles[i].x + OBSTACLE_WIDTH < car_left || obstacles[i].x > car_left + CAR_WIDTH))
 192   3                      return 1;
 193   3              }
 194   2          }
 195   1          // Verifica colisão com as paredes
 196   1          return (car_left < LEFT_TRACK_BASE + track_offsets[7] || 
 197   1                  car_left + CAR_WIDTH > RIGHT_TRACK_BASE + track_offsets[7]);
 198   1      }
 199          
 200          void Draw_Car(char seta) {
 201   1        int car_left;
 202   1        unsigned char i;
 203   1          center_car += seta;
 204   1          car_left = center_car - (CAR_WIDTH / 2);
 205   1          
 206   1          
 207   1          // Desenha o carro quando está na esquerda
 208   1          if (car_left + CAR_WIDTH <= 64) {
 209   2              CS1 = 0; CS2 = 1;
 210   2              GLCD_Write(0xB8 | 7, 1);
 211   2              GLCD_Write(0x40 | car_left, 1);
 212   2              for (i = 0; i < CAR_WIDTH; i++) GLCD_Write(car[i], 0);
 213   2          } 
 214   1          // Desenha o carro quando está na direita
 215   1          else if (car_left >= 64) {
 216   2              CS1 = 1; CS2 = 0;
 217   2              GLCD_Write(0xB8 | 7, 1);
 218   2              GLCD_Write(0x40 | (car_left - 64), 1);
 219   2              for (i = 0; i < CAR_WIDTH; i++) GLCD_Write(car[i], 0);
 220   2          }
 221   1          else {
 222   2              // Carro dividido entre as telas
 223   2              CS1 = 0; CS2 = 1;
 224   2              GLCD_Write(0xB8 | 7, 1);
 225   2              GLCD_Write(0x40 | car_left, 1);
 226   2              for (i = 0; i < 64 - car_left; i++) GLCD_Write(car[i], 0);
 227   2              
 228   2              CS1 = 1; CS2 = 0;
 229   2              GLCD_Write(0xB8 | 7, 1);
 230   2              GLCD_Write(0x40, 1);
 231   2              for (; i < CAR_WIDTH; i++) GLCD_Write(car[i], 0);
 232   2          }
 233   1          
 234   1          colisao = check_collision(car_left);
 235   1      }
 236          
 237          const unsigned int pot10[] = {1, 10, 100, 1000, 10000,100000};
 238          
 239          void main() {
 240   1        
C51 COMPILER V9.60.7.0   STOCKCAR                                                          07/22/2025 22:41:04 PAGE 5   

 241   1        int col;
 242   1        int num;
 243   1        int digito;
 244   1        int temp;
 245   1        int i;
 246   1        GLCD_Init();
 247   1        GLCD_ClearAll();
 248   1        
 249   1        //Tela Inicial
 250   1        CS1 = 0; CS2=1;
 251   1        GLCD_Write(0xB8+3,1);
 252   1        GLCD_Write(0x40,1);
 253   1        for (col = 0; col < 5; col++)
 254   1              GLCD_Write(font[18][col],0);
 255   1        for (col = 0; col < 5; col++)
 256   1              GLCD_Write(font[19][col],0);
 257   1        for (col = 0; col < 5; col++)
 258   1              GLCD_Write(font[16][col],0);
 259   1        for (col = 0; col < 5; col++)
 260   1              GLCD_Write(font[13][col],0);
 261   1        for (col = 0; col < 5; col++)
 262   1              GLCD_Write(font[15][col],0);
 263   1        GLCD_Write(0xB8+4,1);
 264   1        GLCD_Write(0x40,1);
 265   1        for (col = 0; col < 5; col++)
 266   1              GLCD_Write(font[13][col],0);
 267   1        for (col = 0; col < 5; col++)
 268   1              GLCD_Write(font[12][col],0);
 269   1        for (col = 0; col < 5; col++)
 270   1              GLCD_Write(font[17][col],0);
 271   1          delay(2000);
 272   1          
 273   1          //Loop principal
 274   1          while (!colisao) {
 275   2              GLCD_ClearAll();
 276   2              Gerar_Curva();
 277   2              Generate_Obstacles();
 278   2              seta = scanKey();
 279   2              Draw_Car(seta);
 280   2              delay(300);
 281   2              score++;
 282   2          }
 283   1          
 284   1          //Tela após batida
 285   1       while (1) {
 286   2        GLCD_ClearAll();
 287   2        CS1 = 0; CS2 = 1;
 288   2        GLCD_Write(0xB8 | 4,1);
 289   2        GLCD_Write(0x40 | 30,1);
 290   2          for (col = 0; col < 5; col++)
 291   2              GLCD_Write(font[18][col],0);
 292   2        for (col = 0; col < 5; col++)
 293   2              GLCD_Write(font[13][col],0);
 294   2        for (col = 0; col < 5; col++)
 295   2              GLCD_Write(font[16][col],0);
 296   2        for (col = 0; col < 5; col++)
 297   2              GLCD_Write(font[17][col],0);
 298   2         for (col = 0; col < 5; col++)
 299   2              GLCD_Write(font[14][col],0);
 300   2         for (col = 0; col < 5; col++)
 301   2              GLCD_Write(font[11][col],0);
 302   2          num = score;
C51 COMPILER V9.60.7.0   STOCKCAR                                                          07/22/2025 22:41:04 PAGE 6   

 303   2          temp = num;
 304   2          digito = 0;
 305   2          while (temp > 0) {
 306   3            temp = temp / 10;
 307   3            digito++;
 308   3          }
 309   2      
 310   2          CS1 = 0; CS2 = 1;
 311   2          GLCD_Write(0xB8 |  5,1);
 312   2      
 313   2          for (i = 0; i < digito; i++) {
 314   3            GLCD_Write(0x40 |  30 + i * 6,1);
 315   3            for (col = 0; col < 5; col++)
 316   3              GLCD_Write(font[1 + (num / pot10[digito - 1 - i])][col],0);
 317   3            num = num % pot10[digito - 1 - i];
 318   3          }
 319   2      delay(1000);
 320   2          GLCD_ClearAll();
 321   2        }
 322   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1894    ----
   CONSTANT SIZE    =    100    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     53      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
